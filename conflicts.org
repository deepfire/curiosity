#+TITLE: Domain conflicts: dependencies and types

* GHC bugs?
*** (.) losing constraints?
    #+BEGIN_SRC haskell
  withVTag (tVTag tagsf) $ withVTag (tVTag tagst)
  /=
  withVTag (tVTag tagsf) . withVTag (tVTag tagst)
    #+END_SRC

    #+BEGIN_SRC haskell
withVTag (tVTag tagsf) . withVTag (tVTag tagst) $
  let dyn = toDyn (IOA mf Proxy Proxy Proxy :: ioa)
  in Pipe (mkDesc name tagsf tagst (dynRep dyn) mf) dyn
    #+END_SRC

    #+BEGIN_SRC haskell
src/Ground/Table.hs:191:15: error:
    • Could not deduce (Typeable * tf) arising from a use of ‘toDyn’
      from the context: (ReifyCTag cf, ReifyCTag ct, ReifyVTag tf,
                         ReifyVTag tt, Typeable Con cf, Typeable Con ct, Typeable * tt,
                         Typeable (* -> Constraint) c, c tt,
                         (ioa :: *)
                         ~ (IOA c ((':) * (Types cf tf) ('[] *)) (Types ct tt) :: *))
        bound by the type signature for:
                   linkPipe :: forall (cf :: Con) tf (ct :: Con) tt (c :: *
                                                                          -> Constraint) ioa.
                               (ReifyCTag cf, ReifyCTag ct, ReifyVTag tf, ReifyVTag tt,
                                Typeable Con cf, Typeable Con ct, Typeable * tt,
                                Typeable (* -> Constraint) c, c tt,
                                (ioa :: *)
                                ~ (IOA c ((':) * (Types cf tf) ('[] *)) (Types ct tt) :: *)) =>
                               Name ((* -> Constraint) -> [*] -> * -> * -> *) Pipe
                               -> Types cf tf
                               -> Types ct tt
                               -> (Repr cf tf -> Result (Repr ct tt))
                               -> Pipe c ((':) * (Types cf tf) ('[] *)) (Types ct tt) Dynamic
        at src/Ground/Table.hs:(177,1)-(188,48)
    • In the expression: toDyn (IOA mf Proxy Proxy Proxy :: ioa)
      In an equation for ‘dyn’:
          dyn = toDyn (IOA mf Proxy Proxy Proxy :: ioa)
      In the second argument of ‘($)’, namely
        ‘let dyn = toDyn (IOA mf Proxy Proxy Proxy :: ioa)
         in Pipe (mkDesc name tagsf tagst (dynRep dyn) mf) dyn’
    #+END_SRC

  where:

    #+BEGIN_SRC haskell
withVTag :: VTag a -> ((Typeable a, ReifyVTag a) => r) -> r
withVTag x f = case x of
  VTop -> f
    ...

mkDesc :: (Typeable tf, Typeable tt)
       => Name Pipe -> Tags (Types cf tf) -> Tags (Types ct tt)
       -> SomeTypeRep
       -> (Repr cf tf -> Result (Repr ct tt))
       -> Desc c '[Types cf tf] (Types ct tt)
    #+END_SRC

* Granularity of Ground
  1. Ground serves several needs:
     - interactivity
       - Parse (hard)
       - Show (hard)
       - Read (soft)
     - transportability
       - Serialise (hard)
     - representability as part of superstructures:
       - either Ord & Eq -- only for Data.Set.Monad
       - or Hashable -- for Data.HashSet
  2. Ord and Eq are hard

*** Investigation
    - raw:

  src/Dom/SomeValue.hs:52:17: error:
      • Could not deduce (Eq (Repr c a))
          arising from a use of ‘SomeValueKinded’
        from the context: (Typeable Con c, ReifyCTag c, Ground a)
          bound by the type signature for:
                     mkSomeGroundValue :: forall (c :: Con) a.
                                          (Typeable Con c, ReifyCTag c, Ground a) =>
                                          CTag c -> VTag a -> Repr c a -> SomeValue
          at src/Dom/SomeValue.hs:(48,1)-(50,46)

    - =Read SomeValue= -> =readSomeValue=
      - mkSomeGroundValue
        - has =Ground a=  <- from the recovered =TyDict Ground=
        - needs =Eq (Repr c a)=
        - for =SomeValueKinded=
          - which needs if tor =Eq (SomeValueKinded c)=
            - =Ord (SomeValueKinded c)=
              - =Ord SomeValue=
                - =Ord Expr=
                  - ground table entry for =Expr=
* Equality
  1. 

*** Root cause
    =elemIndex= requires =Eq=
    #+BEGIN_SRC haskell
              , selIndex  = menuChoice  <&>
                            (flip List.elemIndex sfpElems
                             >>> fmap Index)
                            & join
                            & fromMaybe (Index 0)
    #+END_SRC

*** Error on the path
MainCLI.hs:306:9: error:
    • Could not deduce (Eq Acceptable) arising from a use of ‘selector’
      from the context: (ReflexVty t m, PerformEvent t m,
                         MonadIO (Performable m))
        bound by the type signature for:
                   spaceInteraction :: forall t (m :: * -> *).
                                       (ReflexVty t m, PerformEvent t m, MonadIO (Performable m)) =>
                                       (Execution -> IO ())
                                       -> Event t SomeValue -> VtyWidget t m (Event t ())
        at MainCLI.hs:(183,1)-(188,31)
    • In a stmt of an 'mdo' block:
        selr :: Selector t m Acceptable Acceptance <- (selector sfpD ::
